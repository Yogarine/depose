#!/usr/bin/env php
<?php

$depose = array_shift($argv);
$stage  = array_shift($argv);

if ($argc < 2 || get_option('help', 'h')) {
	usage($depose);
}

if ($argc < 2) {
	die(1);
}

$dockerComposeParts = ['docker-compose'];
$commandParts       = [];

if (file_exists(".env.{$stage}")) {
    $dotEnvFile = ".env.{$stage}";
} else {
    $commandParts[] = $stage;
    $dotEnvFile = '.env';
}

$noCompatibility = pluck_option('no-compatibility');
$dotEnvFile      = pluck_option('env-file', null, true) ?: $dotEnvFile;
$foreground      = pluck_option('foreground', 'F');
$projectName     = pluck_option(null, 'N');
if (null === $projectName || find_option(null, 'N') < find_option('project-name', 'p')) {
    $projectName = get_option('project-name', 'p', true);
}

if (! $noCompatibility) {
    $dockerComposeParts[] = '--compatibility';
}

$dotEnv = parse_dot_env($dotEnvFile);
if ($projectName) {
    $dotEnv['COMPOSE_PROJECT_NAME'] = $projectName;
}

if (get_option('no-cli')) {
    $dotEnv['COMPOSE_INTERACTIVE_NO_CLI'] = 1;
}

foreach ($dotEnv as $var => $val) {
    putenv("{$var}={$val}");
}

foreach ($argv as $arg) {
    $commandParts[] = $arg;
}

if ('up' === ($commandParts[0] ?? null) && ! $foreground) {
    $commandParts[] .= ' -d';
}

$command = implode(' ', $dockerComposeParts) . ' ' . implode(' ', $commandParts);
passthru($command, $returnVar);

die($returnVar);


/**
 * @param  string  $depose
 * @return void
 */
function usage(string $depose): void
{
	if (! exec('docker-compose --help', $dockerComposeHelp)) {
		error_log("Couldn't find docker-compose on your system. You need docker-compose installed to use depose.");
	}

	$dockerComposeHelp = implode(PHP_EOL, array_slice($dockerComposeHelp, array_search('Options:', $dockerComposeHelp)));

	// TODO add:   -e, --environment           Environment
	echo <<<EOD
Define and run multi-container applications with Docker.

Usage:
  {$depose} [STAGE] [depose options] [options] [COMMAND] [ARGS...]
  {$depose} -h|--help

Depose Options:
  -E, --env-file              .env file to use
  -C, --no-cli                If set, Compose doesnâ€™t attempt to use the Docker
                              CLI for interactive run and exec operations
  --no-compatibility          Don't attempt to convert keys in v3 files to
                              their non-Swarm equivalent
  -F, --foreground            Foreground mode: Run containers in the foreground

{$dockerComposeHelp}
EOD;
}

/**
 * @param  string|null  $option
 * @param  string|null  $shortOption
 * @param  bool         $hasValue
 * @return bool
 */
function get_option(string $option = null, string $shortOption = null, bool $hasValue = false): bool
{
	global $argv;

    $key = find_option($option, $shortOption);

	if ($key) {
		if ($hasValue) {
			return $argv[$key + 1];;
		}

		return true;
	}

	return false;
}

/**
 * @param  string       $option
 * @param  string|null  $shortOption
 * @param  bool         $hasValue
 * @return bool|string|null
 */
function pluck_option(string $option = null, string $shortOption = null, bool $hasValue = false)
{
    global $argv;

	$key = find_option($option, $shortOption);

	if ($key) {
		unset($argv[$key]);

		if ($hasValue) {
			$value = $argv[$key + 1];
			unset($argv[$key + 1]);
		} else {
			$value = true;
		}
	} else {
        if ($hasValue) {
            $value = null;
        } else {
            $value = false;
        }
	}

	return $value;
}

/**
 * @param  string|null  $option
 * @param  string|null  $shortOption
 * @return int
 */
function find_option($option = null, $shortOption = null)
{
    global $argv;

    $reverse = array_reverse($argv, true);
    $keys = [];

    if ($option) {
        $keys[] = array_search("--{$option}", $reverse);
    }

    if ($shortOption) {
        $keys[] = array_search("-{$shortOption}", $reverse);
    }

    if ($keys) {
        return max($keys);
    }

    return false;
}

/**
 * @param  string  $filename
 * @return array
 */
function parse_dot_env($filename)
{
    if (! file_exists($filename)) {
        return [];
    }

    $dotEnv = file_get_contents($filename);

    $env = [];
    foreach (explode("\n", $dotEnv) as $row) {
    	$comment = strpos($row, '#');
    	if (false !== $comment) {
    		$row = substr($row, 0, $comment);
	    }

        if (strpos($row, '=')) {
            [$var, $val] = explode('=', $row, 2);
            $env[$var] = $val;
        }
    }

    return $env;
}
